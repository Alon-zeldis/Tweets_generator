import datetime
from tkinter import *
from tkinter import filedialog
from tkinter import messagebox
from Tweets_generator.project_functions import db_funcs, algorithm


# creates the file browsing window


def browse(entry):
    filepath = filedialog.askopenfilename(initialdir=".\\tweetsgenerator-v2", title="Select a file"
                                          , filetypes=(("txt files", "*.txt"), ("all files", "*.*")))
    entry.insert(0, filepath)

# The function takes as input the necessary widgets and the empty dict and builds the dict as explained in the
# algorithm file by using the user input from the widgets


def submit_click(entry, dictt, gen_button, multi_entry):
    if not entry.get():
        error_window = messagebox.showerror("Error window", "You did not put anything in or the path is wrong")
    else:
        try:
            with open(entry.get(), "r") as tweets_file:
                for line in tweets_file.readlines():
                    line_split = line.split()
                    for ind in range(len(line_split)):
                        cur_word = line_split[ind]
                        if cur_word not in dictt:
                            try:
                                dictt[cur_word] = [line_split[ind + 1]]
                            except IndexError:
                                dictt[cur_word] = []
                        elif cur_word in dictt:
                            try:
                                dictt[cur_word].append(line_split[ind + 1])
                            except IndexError:
                                pass
            gen_button["state"] = NORMAL
            multi_entry["state"] = NORMAL
        except FileNotFoundError:
            error_window = messagebox.showerror("Error window", "You did not put anything in or the path is wrong")

# Build the dict as explained in the algorithm file while using a default text file


def default_click(dictt, gen_button, multi_entry):
    with open("project_functions\justdoit_tweets.txt", "r") as tweets_file:
        for line in tweets_file.readlines():
            line_split = line.split()
            for ind in range(len(line_split)):
                cur_word = line_split[ind]
                if cur_word not in dictt:
                    try:
                        dictt[cur_word] = [line_split[ind + 1]]
                    except IndexError:
                        dictt[cur_word] = []
                elif cur_word in dictt:
                    try:
                        dictt[cur_word].append(line_split[ind + 1])
                    except IndexError:
                        pass
    gen_button["state"] = NORMAL
    multi_entry["state"] = NORMAL

# Creates and displays statistics from the database using the functions explained in the db_funcs file


def generate_statistics(new_window_source, value):
    statistics_window = Toplevel(new_window_source)
    statistics_window.title("Statistics window")
    cur_count = db_funcs.search_db(value)[0]
    cur_average = db_funcs.average_len()[0]

    total_tweets_label = Label(statistics_window, text=f"There has been {cur_count} tweets generated by this program")
    total_tweets_label.grid(row=0, column=0)

    average_label = Label(statistics_window, text=f"The average length of a tweet is {int(cur_average)}")
    average_label.grid(row=1, column=0)

# The function build the requested amount of tweets and enters each one into the database


def generate_click(entry, dictt, frame, new_window_source):
    num_of_tweets = entry.get()
    if num_of_tweets is None or not num_of_tweets.isdigit():
        sentence, sentence_len = algorithm.build_sentence(dictt)
        db_funcs.enter_to_db((sentence, "1", str(datetime.date.today()), sentence_len))
        new_tweet = Label(frame, text=sentence).pack()
    else:
        tweets_window = Toplevel(new_window_source)
        tweets_window.title("Tweets window")
        for i in range(int(num_of_tweets)):
            sentence, sentence_len = algorithm.build_sentence(dictt)
            db_funcs.enter_to_db((sentence, "1", str(datetime.date.today()), sentence_len))
            new_tweet = Label(tweets_window, text="Tweet num " + str(i + 1) + " is: " + sentence, pady=10)
            new_tweet.grid(row=i, column=0)
        statistics = Button(tweets_window, text="statistics", pady=10,
                            command=lambda: generate_statistics(statistics, sentence), height=7, borderwidth=2)
        statistics.grid(row=0, column=1, rowspan=int(num_of_tweets))




